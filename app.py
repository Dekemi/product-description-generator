# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12GX5oGcANM9BOHzl35R0m22zoeIcP1t7
"""

# app.py

import streamlit as st
from PIL import Image
import os
import torch
from transformers import pipeline, AutoTokenizer, AutoModelForCausalLM # Add the new imports

# --- Configuration ---
try:
    hf_token = st.secrets["HF_TOKEN"]
except (FileNotFoundError, KeyError):
    hf_token = os.environ.get("HF_TOKEN")

# --- Load Models ---
@st.cache_resource
def load_models():
    # Text Generation Model (the part you fixed)
    tokenizer = AutoTokenizer.from_pretrained("gpt2-medium")
    model = AutoModelForCausalLM.from_pretrained("gpt2-medium")


    # Image Captioning Model
    image_captioner = pipeline("image-to-text", model="microsoft/git-base",)
    return tokenizer, model, image_captioner
tokenizer, model, image_captioner = load_models()

# --- AI Model Functions ---
def get_text_response(prompt):
    """Generates text using the loaded language model."""
    try:
        # Tokenize the input
        input_ids = tokenizer.encode(prompt, return_tensors="pt")

        # Generate output tokens
        output_ids = model.generate(
            input_ids,
            max_new_tokens=250,
            do_sample=True,
            temperature=0.7,
            pad_token_id=tokenizer.eos_token_id
        )

        # Decode tokens to string
        generated_text = tokenizer.decode(output_ids[0], skip_special_tokens=True)

        # Remove the original prompt from the output if present
        if generated_text.startswith(prompt):
            return generated_text[len(prompt):].strip()
        else:
            return generated_text.strip()
    except Exception as e:
        return f"Error generating text: {e}"

def get_image_caption(image):
    """Generates a caption for the uploaded image."""
    result = image_captioner(image)
    return result[0]['generated_text']

# --- Streamlit App Interface ---

st.set_page_config(page_title="AI Product Description Generator", page_icon="üõçÔ∏è", layout="wide")

st.title("ü§ñ AI Product Description Generator")
st.write("Generate compelling product descriptions in seconds. Just fill in the details below!")

st.divider()

# --- User Inputs ---
col1, col2 = st.columns(2)

with col1:
    st.subheader("Product Details")
    product_name = st.text_input("Product Name", placeholder="e.g., 'AeroPress Coffee Maker'")
    audience = st.text_input("Target Audience", placeholder="e.g., 'Coffee enthusiasts, travelers, minimalist campers'")
    keywords = st.text_area(
        "Keywords / Attributes (comma-separated)",
        placeholder="e.g., 'portable, easy to clean, rich flavor, non-electric, durable'"
    )

with col2:
    st.subheader("Image (Optional)")
    uploaded_image = st.file_uploader(
        "Upload an image of your product",
        type=["png", "jpg", "jpeg"]
    )
    if uploaded_image:
        image = Image.open(uploaded_image)
        st.image(image, caption="Your Uploaded Product", use_column_width=True)
    else:
        image = None

st.divider()

# --- Advanced Options ---
with st.expander("‚ú® Advanced Options (Optional)"):
    tone_of_voice = st.selectbox(
        "Tone of Voice",
        ["Persuasive", "Professional", "Friendly", "Witty", "Technical", "Luxury"]
    )
    output_format = st.radio(
        "Output Format",
        ["Paragraph", "Bulleted List", "Paragraph with Emojis"],
        horizontal=True
    )

# --- Generate Button & Output ---
if st.button("üöÄ Generate Description", use_container_width=True, type="primary"):
    if not product_name:
        st.warning("Please enter a Product Name to continue.")
    else:
        with st.spinner("üß† AI is thinking..."):
            # Start building the prompt
            extra_context = ""
            if image:
                try:
                    image_caption = get_image_caption(image)
                    extra_context = f"The product image seems to show: {image_caption}\n"
                except Exception as e:
                    st.error(f"Image analysis failed: {e}")

            prompt = f"Write a short, compelling product description for {product_name} targeting {audience} using these keywords: {keywords}. Tone: {tone_of_voice}. Format: {output_format}."

            try:
                response = get_text_response(prompt)

                st.subheader("‚úÖ Here's your generated description:")
                st.markdown(response)

            except Exception as e:
                st.error(f"An error occurred: {e}")

if st.sidebar.button("Clear Cache & Rerun"):
    st.cache_resource.clear()
    st.rerun()