# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12GX5oGcANM9BOHzl35R0m22zoeIcP1t7
"""

# app.py

import streamlit as st
import google.generativeai as genai
from PIL import Image
import os

# --- Configuration ---
# Set up your Google AI API key. It's recommended to use Streamlit's secrets management.
# For local development, you can set it as an environment variable.
# For deployment, you'll set this in the Streamlit Community Cloud settings.
try:
    # Attempt to get the API key from Streamlit secrets
    api_key = st.secrets["GOOGLE_API_KEY"]
except (FileNotFoundError, KeyError):
    # Fallback for local development if secrets.toml doesn't exist
    # You should set this environment variable on your local machine
    api_key = os.environ.get("GOOGLE_API_KEY")

# If the API key is still not found, show an error and stop.
if not api_key:
    st.error("Google API Key not found. Please set it in your Streamlit secrets or as an environment variable.")
    st.stop()

genai.configure(api_key=api_key)

# --- AI Model Functions ---

def get_gemini_response_with_image(prompt, image):
    """
    Generates a response from the Gemini 1.5 Pro model using both text and an image.
    """
    model = genai.GenerativeModel('gemini-1.5-pro')
    response = model.generate_content([prompt, image])
    return response.text

def get_gemini_response_text_only(prompt):
    """
    Generates a response from the Gemini 1.5 Pro model using only text.
    """
    model = genai.GenerativeModel('gemini-1.5-pro')
    response = model.generate_content(prompt)
    return response.text

# --- Streamlit App Interface ---

st.set_page_config(page_title="AI Product Description Generator", page_icon="üõçÔ∏è", layout="wide")

st.title("ü§ñ AI Product Description Generator")
st.write("Generate compelling product descriptions in seconds. Just fill in the details below!")

st.divider()

# --- User Inputs ---
col1, col2 = st.columns(2)

with col1:
    st.subheader("Product Details")
    product_name = st.text_input("Product Name", placeholder="e.g., 'AeroPress Coffee Maker'")
    audience = st.text_input("Target Audience", placeholder="e.g., 'Coffee enthusiasts, travelers, minimalist campers'")
    keywords = st.text_area(
        "Keywords / Attributes (comma-separated)",
        placeholder="e.g., 'portable, easy to clean, rich flavor, non-electric, durable'"
    )

with col2:
    st.subheader("Image (Optional)")
    uploaded_image = st.file_uploader(
        "Upload an image of your product",
        type=["png", "jpg", "jpeg"]
    )
    if uploaded_image:
        image = Image.open(uploaded_image)
        st.image(image, caption="Your Uploaded Product", use_column_width=True)

st.divider()

# --- Advanced Options ---
with st.expander("‚ú® Advanced Options (Optional)"):
    tone_of_voice = st.selectbox(
        "Tone of Voice",
        ["Persuasive", "Professional", "Friendly", "Witty", "Technical", "Luxury"]
    )
    output_format = st.radio(
        "Output Format",
        ["Paragraph", "Bulleted List", "Paragraph with Emojis"],
        horizontal=True
    )

# --- Generate Button & Output ---
if st.button("üöÄ Generate Description", use_container_width=True, type="primary"):
    if not product_name:
        st.warning("Please enter a Product Name to continue.")
    else:
        with st.spinner("üß† AI is thinking..."):
            # Construct the prompt
            prompt = f"""
            You are a professional marketing copywriter. Your task is to generate a compelling product description.

            **Product Name:** {product_name}
            **Target Audience:** {audience}
            **Key Features/Keywords:** {keywords}
            **Desired Tone of Voice:** {tone_of_voice}
            **Desired Format:** {output_format}

            Based on the information provided (and the image if available), write a product description.
            Do not include the labels like 'Product Name:', 'Target Audience:', etc., in your final output.
            Generate only the description itself.
            """

            try:
                if uploaded_image:
                    # If an image is uploaded, use the vision model
                    response = get_gemini_response_with_image(prompt, image)
                else:
                    # Otherwise, use the text-only model
                    response = get_gemini_response_text_only(prompt)

                st.subheader("‚úÖ Here's your generated description:")
                st.markdown(response)

            except Exception as e:
                st.error(f"An error occurred: {e}")
